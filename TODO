[ESL] Option parser
[ESL] Error handling
[DOC] Write Documentation
[VM] Properly handle "nil"
[CHECK] String check
[CHECK] Array check
[CHECK] Functions check
[LEXER/PARSER/COMPILER] Introduce for loop
[LEXER/PARSER/COMPILER/VM] Introduce foreach loop
[PARSER] Introduce Unary operators
[LEXER/PARSER] Introduce "include" keywords
[LEXER 50%] Introduce Comments
[COMPILER] Introduce Bytecode optimizer
[COMPILER] Introduce AST checker to provide bad operation (-, /, ... on strings, ...)
[LEXER/PARSER/COMPILER/VM] Introduce post/pre incrementation/decrementation
                           (add specific bytecode)
[PARSER] Introduce +=, -=, *=, /=, %= operators
[PARSER/COMPILER/VM] break statement
[PARSER/COMPILER/VM] continue statement
[AST/BYTECODE/VM] Add locations info
[LEXER] Add escape chars in strings
[PARSER/COMPILER] Add array declaration with { }
[PARSER] Update grammar for arrays
[VM] Type float instead of int
[VM] O_PRIVATE_TYPE for internal type of APIs that cannot be used
[VM] Improve function design
[PARSER] Add alternative syntax for multidimensional array [,]
[LIBESL] Reorder
[LIB] Module IO
[LIB] Module Array
[LIB] Module Utils
[LIB] Cast function
[LIB] Module String
[LIB] Rename module array class as ArrayModule
[LEXER/PARSER/COMPILER/VM] Add object paradigm
[LEXER/PARSER/COMPILER/VM] Type forcing (multi type)
[BYTECODE] Rename operators instruction in OPERATOR_[name]

[API] Improve API

- Review Code:
    * Less dynamic allocation
    * Use variants in parser
    * Securise Cast with c++ cast and return check
    * Replace NULL by nullptr
    * Rewrite Context

Bugs:

