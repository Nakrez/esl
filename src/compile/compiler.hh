/// @file src/compile/compiler.hh
/// @brief Compiler that compile the AST (given by the parser) into bytecode
/// @author Baptiste COVOLATO <b.covolato@gmail.com>
/// @date 29/09/2012

#ifndef COMPILER_HH
# define COMPILER_HH

# include <string>
# include <vector>
# include <iostream>
# include <fstream>

# include <utils/bytecode.hh>
# include <utils/utils.hh>

# include <ast/ast.hh>

namespace esl
{
    class Compiler
    {
        public:
            /// @brief Constructor
            /// @param ast The ast you want to compile into bytecode
            Compiler (ast::Ast* ast);

            /// @brief Destructor
            ~Compiler ();

            /// @brief Run the compiler : produce bytecode vector from ast
            void compile ();

            /// @brief Export bytecode into a file (TODO: Export in optimize
            ///        way)
            /// @param filename The name of the file where you want to export
            ///                 the bytecode
            void export_bytecode (const std::string &filename);

            /// @brief Get the bytecode generated by the compiler
            /// @return A @a std::vector containing the bytecode
            std::vector<Bytecode*> get_bytecode ();

        private:
            /// @brief The main compilation function
            /// @param ast The ast you want to compile
            void compile (ast::Ast* ast);

            /// @brief Compile Statement node of the AST
            /// @param ast The node which contains the statement
            void compile_statements (ast::Ast* ast);

            /// @brief Compile assignement node of the AST
            /// @param ast The node which contains the assignement
            void compile_assignement (ast::Ast* ast);

            /// @brief Compile id [ expr ] = value node of the AST
            /// @param ast The node which contains the array assignement
            void compile_assignement_array (ast::Ast* ast);

            /// @brief Compile operator[] node of the AST
            /// @param ast The node which contains the array at
            void compile_array_at (ast::Ast* ast);

            /// @brief Compile operation node of the AST
            /// @param ast The node which contains the operation
            void compile_operation (ast::Ast* ast, instr);

            /// @brief Compile loop node of the AST
            /// @param ast The node which contains the loop
            void compile_loop (ast::Ast* ast, instr);

            /// @brief Compile number node of the AST
            /// @param ast The node which contains the number
            void compile_number (ast::Ast* ast);

            /// @brief Compile string node of the AST
            /// @param ast The node which contains the string
            void compile_string (ast::Ast* ast);

            /// @brief Compile identifier node of the AST
            /// @param ast The node which contains the identifier
            void compile_identifier (ast::Ast* ast);

            /// @brief Compile if node of the AST
            /// @param ast The node which contains the if
            void compile_if (ast::Ast* ast);

            /// @brief Compile function node of the AST
            /// @param ast The node which contains the function
            void compile_function (ast::Ast* ast);

            /// @brief Compile call jnode of the AST
            /// @param ast The node which contains the call
            /// @param method true if this is a method call, else false
            void compile_call (ast::Ast* ast, bool method);

            /// @brief Compile list node of the AST
            /// @param ast The node which contains the list
            void compile_list (ast::Ast* ast);

            /// @brief Compile list id node of the AST
            /// @param ast The node which contains the id list
            void compile_list_id (ast::Ast* ast);

            /// @brief Compile import node of the AST
            /// @param ast The node which contains the import
            void compile_import (ast::Ast* ast);

            /// @brief Compile return node of the AST
            /// @param ast The node which contains the return
            void compile_return (ast::Ast* ast);

            /// @brief Compile module call node of the AST
            /// @param ast The node which contains the module call
            void compile_module_call (ast::Ast* ast);

            /// @brief Compile method call node of the AST
            /// @param ast The node which contains the  method call
            void compile_method_call (ast::Ast* ast);

            /// @brief Compile object instanciation
            /// @param ast The node that represents the instanciation
            void compile_new (ast::Ast* ast);

            void compile_class (ast::Ast* ast);
            void compile_attribut (ast::Ast* ast, bool treated);
        private:

            /// @brief The AST generated by the parser (given by arg to the
            ///        constructor)
            ast::Ast* gen_ast_;

            /// @brief The bytecode generated
            std::vector<Bytecode*> byte_code_;

            bool declared_class_;
            bool declared_function_;
    };
}
#endif /* !COMPILER_HH */
