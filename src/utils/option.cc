#include "option.hh"
#include "../parser/driver.hh"
#include "../compile/compiler.hh"
#include <iostream>
#include <string>

Option::Option(){

}
Option::~Option()
{
}
void Option::ee_optn(){
    std::cout << "+      o     +              o   " << std::endl;
    std::cout << "    +             o     +       +" << std::endl;
    std::cout << "o          +" << std::endl;
    std::cout << "    o  +           +        +" << std::endl;
    std::cout << "+        o     o       +        o" << std::endl;
    std::cout << "-_-_-_-_-_-_-_,------,      o " << std::endl;
    std::cout << "_-_-_-_-_-_-_-|   /\\_/\\  " << std::endl;
    std::cout << "-_-_-_-_-_-_-~|__( ^ .^)  +     +  " << std::endl;
    std::cout << "_-_-_-_-_-_-_-\"\"  \"\"      " << std::endl;
    std::cout << "+      o         o   +       o" << std::endl;
    std::cout << "    +         +" << std::endl;
    std::cout << "o        o         o      o     +" << std::endl;
    std::cout << "    o           +" << std::endl;
    std::cout << "+      +     o        o      +" << std::endl;
    std::cout << "\033[4;35m" << "Trololol, this is Nyan Cat!"
                      << "\033[0m" << std::endl;
}
void Option::ast_optn(Driver* driver){
    esl::Ast* gen_ast_= driver->ast();
    gen_ast_->print();
}
void Option::byte_optn(Driver* driver){
    esl::Compiler *compiler = nullptr;
    compiler = new esl::Compiler(driver->ast());
    compiler->export_bytecode("byte.eslc");
    std::cout<<"Generated bytecode"<<std::endl;
}
